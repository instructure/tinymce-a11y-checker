// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render matches snapshot with errors 1`] = `
<LiveAnnouncer>
  <Tray
    border={false}
    contentRef={[Function]}
    data-mce-component={true}
    defaultFocusElement={null}
    insertAt="bottom"
    label="Accessibility Checker"
    liveRegion={null}
    mountNode={null}
    onClose={[Function]}
    onDismiss={[Function]}
    onEnter={[Function]}
    onEntered={[Function]}
    onEntering={[Function]}
    onExit={[Function]}
    onExited={[Function]}
    onExiting={[Function]}
    onOpen={[Function]}
    open={true}
    placement="end"
    shadow={true}
    shouldCloseOnDocumentClick={false}
    shouldContainFocus={true}
    shouldReturnFocus={true}
    size="small"
  >
    <CloseButton
      as="button"
      buttonRef={[Function]}
      cursor="pointer"
      margin="0"
      offset="x-small"
      onClick={[Function]}
      placement="start"
      size="small"
      type="button"
    >
      Close Accessibility Checker
    </CloseButton>
    <View
      as="div"
      borderColor="primary"
      display="auto"
      focusColor="info"
      focusPosition="offset"
      overflowX="visible"
      overflowY="visible"
      padding="x-large large"
      position="static"
      shouldAnimateFocus={true}
      withVisualDebug={false}
    >
      <Heading
        as="h2"
        border="none"
        color="inherit"
        level="h3"
        margin="medium 0"
      >
         Accessibility Checker
      </Heading>
      <View
        as="div"
        borderColor="primary"
        display="auto"
        focusColor="info"
        focusPosition="offset"
        overflowX="visible"
        overflowY="visible"
        position="static"
        shouldAnimateFocus={true}
        withVisualDebug={false}
      >
        <LiveMessage
          aria-live="polite"
          message="
                  Issue 1/2
                  Element starting with 
                  Error Message
                "
        />
        <View
          as="div"
          borderColor="primary"
          display="auto"
          focusColor="info"
          focusPosition="offset"
          margin="large 0 medium 0"
          overflowX="visible"
          overflowY="visible"
          position="static"
          shouldAnimateFocus={true}
          withVisualDebug={false}
        >
          <Grid
            colSpacing="none"
            hAlign="space-between"
            rowSpacing="medium"
            startAt="small"
            vAlign="middle"
            visualDebug={false}
          >
            <GridRow
              isLastRow={false}
            >
              <GridCol
                isLastCol={false}
                isLastRow={false}
                textAlign="inherit"
              >
                <Text
                  as="span"
                  letterSpacing="normal"
                  size="medium"
                  weight="bold"
                  wrap="normal"
                >
                  Issue 1/2
                </Text>
              </GridCol>
              <GridCol
                isLastCol={false}
                isLastRow={false}
                textAlign="inherit"
                width="auto"
              >
                <Popover
                  color="primary"
                  constrain="window"
                  contentRef={[Function]}
                  defaultIsShowingContent={false}
                  insertAt="bottom"
                  offsetX={0}
                  offsetY={0}
                  on="click"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onHideContent={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  onPositionChanged={[Function]}
                  onPositioned={[Function]}
                  onShowContent={[Function]}
                  placement="bottom center"
                  renderTrigger={null}
                  shadow="resting"
                  shouldAlignArrow={false}
                  shouldCloseOnDocumentClick={true}
                  shouldCloseOnEscape={true}
                  shouldContainFocus={true}
                  shouldFocusContentOnTriggerBlur={false}
                  shouldRenderOffscreen={false}
                  shouldReturnFocus={true}
                  shouldTrackPosition={true}
                  show={false}
                  stacking="topmost"
                  withArrow={true}
                >
                  <PopoverTrigger>
                    <Button
                      as="button"
                      cursor="pointer"
                      display="inline-block"
                      elementRef={[Function]}
                      icon={[Function]}
                      margin="0"
                      onClick={[Function]}
                      onDismiss={[Function]}
                      size="medium"
                      textAlign="center"
                      type="button"
                      variant="icon"
                      withBackground={true}
                    >
                      <ScreenReaderContent
                        as="span"
                      >
                        Why
                      </ScreenReaderContent>
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent>
                    <View
                      borderColor="primary"
                      display="block"
                      focusColor="info"
                      focusPosition="offset"
                      overflowX="visible"
                      overflowY="visible"
                      padding="medium"
                      position="static"
                      shouldAnimateFocus={true}
                      width="16rem"
                      withVisualDebug={false}
                    >
                      <CloseButton
                        as="button"
                        cursor="pointer"
                        margin="0"
                        offset="x-small"
                        onClick={[Function]}
                        placement="end"
                        size="small"
                        type="button"
                        variant="icon"
                      >
                        Close
                      </CloseButton>
                      <Text
                        as="span"
                        letterSpacing="normal"
                        size="medium"
                        wrap="normal"
                      >
                        <p>
                          Why Text
                        </p>
                        <p>
                          <ApplyTheme
                            immutable={false}
                            theme={
                              Object {
                                Symbol(Link__fbyHH): Object {
                                  "textDecoration": "underline",
                                },
                              }
                            }
                          >
                            <Link
                              color="link"
                              href="http://some-url"
                              iconPlacement="start"
                              isWithinText={true}
                              target="_blank"
                            >
                              Link for learning more
                            </Link>
                          </ApplyTheme>
                        </p>
                      </Text>
                    </View>
                  </PopoverContent>
                </Popover>
              </GridCol>
            </GridRow>
          </Grid>
        </View>
        <form
          onSubmit={[Function]}
        >
          <Text
            as="div"
            letterSpacing="normal"
            size="medium"
            wrap="normal"
          >
            Error Message
          </Text>
          <View
            as="div"
            borderColor="primary"
            display="auto"
            focusColor="info"
            focusPosition="offset"
            key="select"
            margin="medium 0 0"
            overflowX="visible"
            overflowY="visible"
            position="static"
            shouldAnimateFocus={true}
            withVisualDebug={false}
          >
            <SimpleSelect
              constrain="window"
              disabled={false}
              inputRef={[Function]}
              isInline={false}
              isRequired={false}
              listRef={[Function]}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onHideOptions={[Function]}
              onShowOptions={[Function]}
              placeholder={null}
              placement="bottom stretch"
              renderAfterInput={null}
              renderBeforeInput={null}
              renderEmptyOption="---"
              renderLabel={[Function]}
              size="medium"
              value="a"
              visibleOptionsCount={8}
            >
              <Option
                id="a"
                isDisabled={false}
                key="a"
                value="a"
              >
                A
              </Option>
              <Option
                id="b"
                isDisabled={false}
                key="b"
                value="b"
              >
                B
              </Option>
            </SimpleSelect>
          </View>
          <View
            as="div"
            borderColor="primary"
            display="auto"
            focusColor="info"
            focusPosition="offset"
            key="checkbox"
            margin="medium 0 0"
            overflowX="visible"
            overflowY="visible"
            position="static"
            shouldAnimateFocus={true}
            withVisualDebug={false}
          >
            <Checkbox
              checked={true}
              disabled={false}
              indeterminate={false}
              inline={false}
              label="Select Field"
              labelPlacement="end"
              name="checkbox"
              onChange={[Function]}
              readOnly={false}
              size="medium"
              variant="simple"
            />
          </View>
          <View
            as="div"
            borderColor="primary"
            display="auto"
            focusColor="info"
            focusPosition="offset"
            key="color"
            margin="medium 0 0"
            overflowX="visible"
            overflowY="visible"
            position="static"
            shouldAnimateFocus={true}
            withVisualDebug={false}
          >
            <ColorField
              label="Select Field"
              name="color"
              onChange={[Function]}
              value="rgba(40, 100, 200, 0.6)"
            />
          </View>
          <View
            as="div"
            borderColor="primary"
            display="auto"
            focusColor="info"
            focusPosition="offset"
            key="text"
            margin="medium 0 0"
            overflowX="visible"
            overflowY="visible"
            position="static"
            shouldAnimateFocus={true}
            withVisualDebug={false}
          >
            <TextInput
              disabled={true}
              display="block"
              inputContainerRef={[Function]}
              inputRef={[Function]}
              isRequired={false}
              label="Text Field"
              messages={Array []}
              name="text"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              shouldNotWrap={false}
              size="medium"
              textAlign="start"
              type="text"
              value="Text"
            />
          </View>
          <View
            as="div"
            borderColor="primary"
            display="auto"
            focusColor="info"
            focusPosition="offset"
            key="textarea"
            margin="medium 0 0"
            overflowX="visible"
            overflowY="visible"
            position="static"
            shouldAnimateFocus={true}
            withVisualDebug={false}
          >
            <TextArea
              autoGrow={true}
              disabled={false}
              inline={false}
              label="Text Area"
              layout="stacked"
              messages={Array []}
              name="textarea"
              onChange={[Function]}
              readOnly={false}
              required={false}
              resize="none"
              size="medium"
              textareaRef={[Function]}
            />
          </View>
          <View
            as="div"
            borderColor="primary"
            display="auto"
            focusColor="info"
            focusPosition="offset"
            margin="medium 0"
            overflowX="visible"
            overflowY="visible"
            position="static"
            shouldAnimateFocus={true}
            withVisualDebug={false}
          >
            <Grid
              colSpacing="none"
              hAlign="space-between"
              rowSpacing="medium"
              startAt="small"
              vAlign="middle"
              visualDebug={false}
            >
              <GridRow
                isLastRow={false}
              >
                <GridCol
                  isLastCol={false}
                  isLastRow={false}
                  textAlign="inherit"
                >
                  <Button
                    aria-label="Previous"
                    as="button"
                    cursor="pointer"
                    display="inline-block"
                    elementRef={[Function]}
                    margin="0 small 0 0"
                    onClick={[Function]}
                    size="medium"
                    textAlign="center"
                    type="button"
                    withBackground={true}
                  >
                    Prev
                  </Button>
                  <Button
                    as="button"
                    cursor="pointer"
                    display="inline-block"
                    elementRef={[Function]}
                    margin="0"
                    onClick={[Function]}
                    size="medium"
                    textAlign="center"
                    type="button"
                    withBackground={true}
                  >
                    Next
                  </Button>
                </GridCol>
                <GridCol
                  isLastCol={false}
                  isLastRow={false}
                  textAlign="inherit"
                  width="auto"
                >
                  <Button
                    as="button"
                    cursor="pointer"
                    disabled={true}
                    display="inline-block"
                    elementRef={[Function]}
                    margin="0"
                    size="medium"
                    textAlign="center"
                    type="submit"
                    variant="primary"
                    withBackground={true}
                  >
                    Apply
                  </Button>
                </GridCol>
              </GridRow>
            </Grid>
          </View>
        </form>
      </View>
    </View>
  </Tray>
</LiveAnnouncer>
`;

exports[`render matches snapshot without errors 1`] = `
<LiveAnnouncer>
  <Tray
    border={false}
    contentRef={[Function]}
    data-mce-component={true}
    defaultFocusElement={null}
    insertAt="bottom"
    label="Accessibility Checker"
    liveRegion={null}
    mountNode={null}
    onClose={[Function]}
    onDismiss={[Function]}
    onEnter={[Function]}
    onEntered={[Function]}
    onEntering={[Function]}
    onExit={[Function]}
    onExited={[Function]}
    onExiting={[Function]}
    onOpen={[Function]}
    open={false}
    placement="end"
    shadow={true}
    shouldCloseOnDocumentClick={false}
    shouldContainFocus={true}
    shouldReturnFocus={true}
    size="small"
  >
    <CloseButton
      as="button"
      buttonRef={[Function]}
      cursor="pointer"
      margin="0"
      offset="x-small"
      onClick={[Function]}
      placement="start"
      size="small"
      type="button"
    >
      Close Accessibility Checker
    </CloseButton>
    <View
      as="div"
      borderColor="primary"
      display="auto"
      focusColor="info"
      focusPosition="offset"
      overflowX="visible"
      overflowY="visible"
      padding="x-large large"
      position="static"
      shouldAnimateFocus={true}
      withVisualDebug={false}
    >
      <Heading
        as="h2"
        border="none"
        color="inherit"
        level="h3"
        margin="medium 0"
      >
         Accessibility Checker
      </Heading>
      <View
        borderColor="primary"
        display="auto"
        focusColor="info"
        focusPosition="offset"
        overflowX="visible"
        overflowY="visible"
        position="static"
        shouldAnimateFocus={true}
        withVisualDebug={false}
      >
        <Text
          as="span"
          letterSpacing="normal"
          size="medium"
          wrap="normal"
        >
          <p>
            No accessibility issues were detected.
          </p>
        </Text>
        <PlaceholderSVG />
      </View>
    </View>
  </Tray>
</LiveAnnouncer>
`;
