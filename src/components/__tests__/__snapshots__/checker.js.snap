// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render matches snapshot with errors 1`] = `
<LiveAnnouncer>
  <Tray
    border={false}
    contentRef={[Function]}
    defaultFocusElement={null}
    insertAt="bottom"
    label="Accessibility Checker"
    liveRegion={null}
    mountNode={null}
    onClose={[Function]}
    onDismiss={[Function]}
    onEnter={[Function]}
    onEntered={[Function]}
    onEntering={[Function]}
    onExit={[Function]}
    onExited={[Function]}
    onExiting={[Function]}
    onOpen={[Function]}
    open={true}
    placement="end"
    shadow={true}
    shouldCloseOnDocumentClick={false}
    shouldContainFocus={true}
    shouldReturnFocus={true}
    size="small"
  >
    <CloseButton
      buttonRef={[Function]}
      margin="0"
      offset="x-small"
      onClick={[Function]}
      placement="start"
      size="small"
      variant="icon"
    >
      Close Accessibility Checker
    </CloseButton>
    <View
      as="div"
      display="auto"
      padding="x-large large"
    >
      <Heading
        as="h2"
        border="none"
        color="inherit"
        ellipsis={false}
        level="h3"
        margin="medium 0"
      >
         Accessibility Checker
      </Heading>
      <View
        as="div"
        display="auto"
      >
        <LiveMessage
          aria-live="polite"
          message="
                  Issue 1/2
                  Element starting with 
                  Error Message
                "
        />
        <View
          as="div"
          display="auto"
          margin="large 0 medium 0"
        >
          <Grid
            colSpacing="none"
            hAlign="space-between"
            rowSpacing="medium"
            startAt="small"
            vAlign="middle"
            visualDebug={false}
          >
            <GridRow>
              <GridCol
                textAlign="inherit"
              >
                <Text
                  as="span"
                  letterSpacing="normal"
                  size="medium"
                  weight="bold"
                >
                  Issue 1/2
                </Text>
              </GridCol>
              <GridCol
                textAlign="inherit"
                width="auto"
              >
                <Popover
                  alignArrow={false}
                  closeButtonLabel="Close"
                  constrain="window"
                  contentRef={[Function]}
                  defaultFocusElement={null}
                  defaultShow={false}
                  insertAt="bottom"
                  label={null}
                  liveRegion={null}
                  mountNode={null}
                  offsetX={0}
                  offsetY={0}
                  on="click"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDismiss={[Function]}
                  onFocus={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  onPositionChanged={[Function]}
                  onPositioned={[Function]}
                  onShow={[Function]}
                  onToggle={[Function]}
                  placement="bottom center"
                  positionTarget={null}
                  shouldCloseOnDocumentClick={true}
                  shouldCloseOnEscape={true}
                  shouldContainFocus={true}
                  shouldRenderOffscreen={false}
                  shouldReturnFocus={true}
                  stacking="topmost"
                  trackPosition={true}
                  variant="default"
                  withArrow={true}
                >
                  <PopoverTrigger>
                    <Button
                      as="button"
                      buttonRef={[Function]}
                      fluidWidth={false}
                      icon={[Function]}
                      margin="0"
                      size="medium"
                      type="button"
                      variant="icon"
                    >
                      <ScreenReaderContent
                        as="span"
                      >
                        Why
                      </ScreenReaderContent>
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent>
                    <View
                      display="block"
                      padding="medium"
                      width="16rem"
                    >
                      <Text
                        as="span"
                        letterSpacing="normal"
                        size="medium"
                      >
                        <p>
                          Why Text 
                          <Link
                            as="button"
                            ellipsis={false}
                            href="http://some-url"
                            iconPlacement="start"
                            linkRef={[Function]}
                            target="_blank"
                            variant="default"
                          >
                            Learn more
                          </Link>
                        </p>
                      </Text>
                    </View>
                  </PopoverContent>
                </Popover>
              </GridCol>
            </GridRow>
          </Grid>
        </View>
        <form
          onSubmit={[Function]}
        >
          <Text
            as="div"
            letterSpacing="normal"
            size="medium"
          >
            Error Message
          </Text>
          <View
            as="div"
            display="auto"
            key="select"
            margin="medium 0 0"
          >
            <Select
              disabled={false}
              inline={false}
              label="Select Field"
              layout="stacked"
              messages={Array []}
              name="select"
              onChange={[Function]}
              selectRef={[Function]}
              size="medium"
              type="text"
              value="a"
            >
              <option
                key="a"
                value="a"
              >
                A
              </option>
              <option
                key="b"
                value="b"
              >
                B
              </option>
            </Select>
          </View>
          <View
            as="div"
            display="auto"
            key="checkbox"
            margin="medium 0 0"
          >
            <Checkbox
              checked={true}
              disabled={false}
              inline={false}
              label="Select Field"
              name="checkbox"
              onChange={[Function]}
              size="medium"
              variant="simple"
            />
          </View>
          <View
            as="div"
            display="auto"
            key="color"
            margin="medium 0 0"
          >
            <ColorField
              label="Select Field"
              name="color"
              onChange={[Function]}
              value="rgba(40, 100, 200, 0.6)"
            />
          </View>
          <View
            as="div"
            display="auto"
            key="text"
            margin="medium 0 0"
          >
            <TextInput
              disabled={true}
              inline={false}
              inputRef={[Function]}
              label="Text Field"
              layout="stacked"
              messages={Array []}
              name="text"
              onChange={[Function]}
              readOnly={false}
              size="medium"
              textAlign="start"
              type="text"
              value="Text"
            />
          </View>
          <View
            as="div"
            display="auto"
            key="textarea"
            margin="medium 0 0"
          >
            <TextArea
              autoGrow={true}
              disabled={false}
              inline={false}
              label="Text Area"
              layout="stacked"
              messages={Array []}
              name="textarea"
              onChange={[Function]}
              readOnly={false}
              resize="none"
              size="medium"
              textareaRef={[Function]}
            />
          </View>
          <View
            as="div"
            display="auto"
            margin="medium 0"
          >
            <Grid
              colSpacing="none"
              hAlign="space-between"
              rowSpacing="medium"
              startAt="small"
              vAlign="middle"
              visualDebug={false}
            >
              <GridRow>
                <GridCol
                  textAlign="inherit"
                >
                  <Button
                    as="button"
                    buttonRef={[Function]}
                    fluidWidth={false}
                    margin="0 small 0 0"
                    onClick={[Function]}
                    size="medium"
                    type="button"
                    variant="default"
                  >
                    Prev
                  </Button>
                  <Button
                    as="button"
                    buttonRef={[Function]}
                    fluidWidth={false}
                    margin="0"
                    onClick={[Function]}
                    size="medium"
                    type="button"
                    variant="default"
                  >
                    Next
                  </Button>
                </GridCol>
                <GridCol
                  textAlign="inherit"
                  width="auto"
                >
                  <Button
                    as="button"
                    buttonRef={[Function]}
                    disabled={true}
                    fluidWidth={false}
                    margin="0"
                    size="medium"
                    type="submit"
                    variant="primary"
                  >
                    Apply
                  </Button>
                </GridCol>
              </GridRow>
            </Grid>
          </View>
        </form>
      </View>
    </View>
  </Tray>
</LiveAnnouncer>
`;

exports[`render matches snapshot without errors 1`] = `
<LiveAnnouncer>
  <Tray
    border={false}
    contentRef={[Function]}
    defaultFocusElement={null}
    insertAt="bottom"
    label="Accessibility Checker"
    liveRegion={null}
    mountNode={null}
    onClose={[Function]}
    onDismiss={[Function]}
    onEnter={[Function]}
    onEntered={[Function]}
    onEntering={[Function]}
    onExit={[Function]}
    onExited={[Function]}
    onExiting={[Function]}
    onOpen={[Function]}
    open={false}
    placement="end"
    shadow={true}
    shouldCloseOnDocumentClick={false}
    shouldContainFocus={true}
    shouldReturnFocus={true}
    size="small"
  >
    <CloseButton
      buttonRef={[Function]}
      margin="0"
      offset="x-small"
      onClick={[Function]}
      placement="start"
      size="small"
      variant="icon"
    >
      Close Accessibility Checker
    </CloseButton>
    <View
      as="div"
      display="auto"
      padding="x-large large"
    >
      <Heading
        as="h2"
        border="none"
        color="inherit"
        ellipsis={false}
        level="h3"
        margin="medium 0"
      >
         Accessibility Checker
      </Heading>
      <View
        display="auto"
      >
        <Text
          as="span"
          letterSpacing="normal"
          size="medium"
        >
          <p>
            No accessibility issues were detected.
          </p>
        </Text>
        <PlaceholderSVG />
      </View>
    </View>
  </Tray>
</LiveAnnouncer>
`;
